// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//datasource db {
//  provider = "postgresql"
//  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
//}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  male
  female
}

model Student {
  id                  Int               @id @default(autoincrement())
  name                String
  lastName          String
  DOB         DateTime
  gender              String
  internalPhotoAllowed Boolean?
  externalPhotoAllowed Boolean?
  medicalNotes        String?
  yearEnteredReception Int
  parent              Parent[]
  courses             Course[]
  attendance          Attendance[]
  term                Term[]      
  report              Report[]
  mentor              Mentor[]
  house               House[]
  registration        Registration[]
  @@unique([name, lastName, DOB])
}

model Parent {
  name     String?
  lastName String?
  address  String?
  postcode String?
  email    String    @id
  phone   String?

  user    User? @relation(fields: [user_id], references: [id]) 
  user_id String? @unique
  students Student[]
  registration Registration[]
}

enum CourseCatagory {
  Islamic
  Skill
  Sport
  Languge
}

model Course {
  id           Int               @id @default(autoincrement())
  course_name         String
  learning_outcomes String? 
  description  String? 
  more_info    String? 
  image        String?
  
  is_new       Boolean?
  is_closed    Boolean? @default(false)
  term         Term?  @relation(fields: [term_id], references: [id])
  term_id      Int?    
  minAge     Int?     @default(1)
  maxAge    Int?      @default(6)
  students     Student[]
  topics       Topic[]
  catagory     CourseCatagory?
  show         Boolean?
  instructor   Staff[]


  @@unique([course_name, term_id])
  @@index(fields: [term_id])
}

model Calendar {
  title   String
  date    DateTime
  private Boolean

  @@unique([title,date])
}

model Attendance {
  student_id  Int
  student     Student   @relation(fields: [student_id], references: [id])
  date        DateTime
  class1      AttendanceState?
  class2      AttendanceState?
  class3      AttendanceState?
  class4      AttendanceState?

  @@unique([student_id, date])
}

model Topic {
  id     Int      @id @default(autoincrement())
  course Course[]
  title   String
  description   String?

}

model Report {
  id      Int  @id
  create_date DateTime
  report  String
  term    Term  @relation(fields: [term_id], references: [id])
  term_id Int
  type    ReportType
  student Student[]
  sub_type ReportSubType
  authour Staff  @relation(fields: [staff_email], references: [email])
  staff_email String

  @@index(fields: [staff_email])
  @@index([term_id])


}

model Term {
  id    Int  @id
  students    Student[]
  courses     Course[]
  reports     Report[]
  houses      House[]
}

model Staff {
  name        String
  full_name   String
  email       String @id
  mentor      Mentor?
  reports     Report[]
  course      Course[]

}

model House {
  id  Int @id 
  name String
  term Term @relation(fields: [term_id], references: [id])
  term_id Int
  students Student[]
  point   Int

  @@unique([name,term_id])
  @@index([term_id])
}

model Mentor {
  id  Int  @id  @default(autoincrement())
  mentor Staff @relation(fields: [staff_email], references: [email])
  staff_email String @unique
  students Student[]
}

model Registration {
  id Int @id
  parent Parent  @relation(fields: [parent_email], references: [email])
  parent_email String 
  student Student  @relation(fields: [student_id], references: [id])
  student_id Int 
  course_choice CourseChoice?

  conditions          Boolean
  payRef         Int?
  payTime        DateTime?

}

model CourseChoice {
  application Registration @relation(fields: [applicatiopn_id], references: [id])
  applicatiopn_id Int @unique @id @default(autoincrement())

  // For Islamic courses
  islamic1  String
  islamic2  String
  islamic3  String
  

  // For Skill courses
  skill1  String
  skill2  String
  skill3  String
  

  // For Skill courses
  sport1  String
  sport2  String
  sport3  String
  

  // For Skill courses
  language1  String
  language2  String
  language3  String
  

}

enum AttendanceState {
  ontime
  absent
  late
}

enum ReportType {
  teacher
  incident
}

enum ReportSubType {
  behaviour
  angry
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  parent        Parent?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}