// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//datasource db {
//  provider = "postgresql"
//  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
//}

// datasource db {
//   provider = "postgresql"
//   url = env("LOCAL_DATABASE")
//   relationMode = "prisma"
// }

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  male
  female
}

model Student {
  id                  String               @id
  name                String
  lastName          String
  DOB         DateTime
  gender              String
  internalPhotoAllowed Boolean?
  externalPhotoAllowed Boolean?
  medicalNotes        String?
  yearEnteredReception Int
  parent              Parent[]
  attendance          Attendance[]    
  report              Report[]
  mentor              Mentor[]
  house               House[]
  registration        Registration[]
  //@@unique([name, lastName, DOB])
}

model Parent {
  name     String?
  lastName String?
  address  String?
  postcode String?
  email    String  @id  
  phone   String?

  user    User? @relation(fields: [user_id], references: [id]) 
  user_id String? @unique
  students Student[]
  registration Registration[]
}

enum CourseCatagory {
  Islamic
  Skill
  Sport
  Language
}

model Course {
  id           Int               @id @default(autoincrement())
  course_name         String
  learning_outcomes String? 
  description  String? 
  more_info    String? 
  image        String?
  
  is_new       Boolean?
  is_closed    Boolean? @default(false)
  term         Term[]
  minAge     Int?     @default(1)
  maxAge    Int?      @default(6)
  catagory     CourseCatagory?
  show         Boolean?

  // Back-reference fields for the relations
  registrations_as_islamic   CourseChoice[] @relation("IslamicRelation")
  registrations_as_skill     CourseChoice[] @relation("SkillRelation")
  registrations_as_language  CourseChoice[] @relation("LanguageRelation")
  registrations_as_sport     CourseChoice[] @relation("SportRelation")

  
}

model Calendar {
  title   String
  date    DateTime
  private Boolean

  @@unique([title,date])
}

model Attendance {
  student_id  String
  student     Student   @relation(fields: [student_id], references: [id])
  date        DateTime
  class1      AttendanceState?
  class2      AttendanceState?
  class3      AttendanceState?
  class4      AttendanceState?

  @@unique([student_id, date])
}


model Report {
  id      Int  @id
  create_date DateTime
  report  String
  term    Term  @relation(fields: [term_id], references: [id])
  term_id Int
  type    ReportType
  student Student[]
  sub_type ReportSubType
  authour Staff  @relation(fields: [staff_id], references: [user_id])
  staff_id String

  @@index(fields: [staff_id])
  @@index([term_id])


}

model Term {
  id    Int  @id
  courses     Course[]
  reports     Report[]
  houses      House[]
  registrations Registration[]
  mentor_groups Mentor[]
}

model Staff {
  user_id     String @unique @id
  user        User @relation(fields: [user_id], references: [id])
  mentor      Mentor?
  reports     Report[]

}

model House {
  id  Int @id 
  name String
  term Term @relation(fields: [term_id], references: [id])
  term_id Int
  students Student[]
  point   Int

  @@unique([name,term_id])
  @@index([term_id])
}

model Mentor {
  id  Int  @id  @default(autoincrement())
  term_id Int 
  term Term @relation(fields: [term_id], references: [id])
  mentor Staff @relation(fields: [staff_id], references: [user_id])
  staff_id String @unique
  students Student[]
}

model Registration {
  id Int @id @default(autoincrement())
  parent Parent  @relation(fields: [parent_email], references: [email])
  parent_email String 
  student Student  @relation(fields: [student_id], references: [id])
  student_id String 
  course_choice CourseChoice?
  term_id Int
  term Term @relation(fields: [term_id], references: [id])
  conditions Boolean?
  payRef     String?
  paid        Boolean? @default(false)
  scholarship_essay String?    @db.Text
  scholarship_amount Decimal?  @db.Decimal(3, 2)

  paymentPlan payPlan? 


}

enum payPlan {
  term
  year
}

model CourseChoice {
  application Registration @relation(fields: [applicatiopn_id], references: [id])
  applicatiopn_id Int @unique @id 

  // For Islamic courses
  Islamic1  String
  Islamic2  String
  Islamic3  String
  
  // For Skill courses
  Skill1  String
  Skill2  String
  Skill3  String
  
  // For Skill courses
  Sport1  String
  Sport2  String
  Sport3  String
  
  // For Skill courses
  Language1  String
  Language2  String
  Language3  String

  islamic_id     Int?
  islamic        Course?     @relation("IslamicRelation", fields: [islamic_id], references: [id])

  skill_id       Int?
  skill          Course?    @relation("SkillRelation", fields: [skill_id], references: [id])

  language_id    Int?
  language       Course?    @relation("LanguageRelation", fields: [language_id], references: [id])

  sport_id       Int?
  sport          Course?    @relation("SportRelation", fields: [sport_id], references: [id])

}

enum AttendanceState {
  ontime
  absent
  late
}

enum ReportType {
  teacher
  incident
}

enum ReportSubType {
  behaviour
  angry
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  parent        Parent?
  staff         Staff?
  isStaff       Boolean @default(false)
  isAdmin       Boolean @default(false)
  accounts      Account[]
}
